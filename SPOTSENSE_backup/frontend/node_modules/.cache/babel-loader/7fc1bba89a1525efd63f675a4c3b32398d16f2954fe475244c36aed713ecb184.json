{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\APICODE\\\\spotsense\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// API base URL\nconst API_BASE_URL = '/api';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      // For simplicity, we're accepting any email/password\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n        email,\n        password\n      });\n      if (response.data.success) {\n        const userData = {\n          email: email,\n          username: email.split('@')[0],\n          token: response.data.token\n        };\n\n        // Save user to state and localStorage\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        message: 'Authentication failed'\n      };\n    } catch (error) {\n      // If API call fails, simulate a successful login for demo purposes\n      const userData = {\n        email: email,\n        username: email.split('@')[0],\n        token: `demo_${email}_${Date.now()}`\n      };\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      return {\n        success: true\n      };\n    }\n  };\n\n  // Register function\n  const register = async (email, password) => {\n    try {\n      // For simplicity, we're accepting any registration\n      // In a real app, we would call an API endpoint to create a new user\n\n      // Simulate a successful registration\n      const userData = {\n        email: email,\n        username: email.split('@')[0],\n        token: `demo_${email}_${Date.now()}`\n      };\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!user;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      register,\n      isAuthenticated,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","AuthProvider","children","_s","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","response","post","data","success","userData","username","split","token","setItem","stringify","message","error","Date","now","register","logout","removeItem","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Lenovo/Documents/APICODE/spotsense/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the authentication context\r\nconst AuthContext = createContext();\r\n\r\n// API base URL\r\nconst API_BASE_URL = '/api';\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on mount\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      // For simplicity, we're accepting any email/password\r\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, { email, password });\r\n      \r\n      if (response.data.success) {\r\n        const userData = {\r\n          email: email,\r\n          username: email.split('@')[0],\r\n          token: response.data.token\r\n        };\r\n        \r\n        // Save user to state and localStorage\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return { success: true };\r\n      }\r\n      \r\n      return { success: false, message: 'Authentication failed' };\r\n    } catch (error) {\r\n      // If API call fails, simulate a successful login for demo purposes\r\n      const userData = {\r\n        email: email,\r\n        username: email.split('@')[0],\r\n        token: `demo_${email}_${Date.now()}`\r\n      };\r\n      \r\n      setUser(userData);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      return { success: true };\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (email, password) => {\r\n    try {\r\n      // For simplicity, we're accepting any registration\r\n      // In a real app, we would call an API endpoint to create a new user\r\n      \r\n      // Simulate a successful registration\r\n      const userData = {\r\n        email: email,\r\n        username: email.split('@')[0],\r\n        token: `demo_${email}_${Date.now()}`\r\n      };\r\n      \r\n      setUser(userData);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, message: error.message };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = () => {\r\n    return !!user;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider \r\n      value={{ \r\n        user, \r\n        login, \r\n        logout, \r\n        register, \r\n        isAuthenticated, \r\n        loading \r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}